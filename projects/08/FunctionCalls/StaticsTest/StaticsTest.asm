// bootstrap initial execution
@256
D=A
@SP
M=D
@VM_BOOTSTRAP.bootstrap$ret.0
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(VM_BOOTSTRAP.bootstrap$ret.0)
// function Sys.init 0
(Sys.init)
@LCL
A=M
@0
D=A
@SP
M=M+D
// 	push constant 6
@6
D=A
@SP
AM=M+1
A=A-1
M=D
// 	push constant 8
@8
D=A
@SP
AM=M+1
A=A-1
M=D
// 	call Class1.set 2
@Sys.init$ret.0
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(Sys.init$ret.0)
// 	pop temp 0 // dumps the return value
@SP
AM=M-1
D=M
@R5
M=D
// 	push constant 23
@23
D=A
@SP
AM=M+1
A=A-1
M=D
// 	push constant 15
@15
D=A
@SP
AM=M+1
A=A-1
M=D
// 	call Class2.set 2
@Sys.init$ret.1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(Sys.init$ret.1)
// 	pop temp 0 // dumps the return value
@SP
AM=M-1
D=M
@R5
M=D
// 	call Class1.get 0
@Sys.init$ret.2
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(Sys.init$ret.2)
// 	call Class2.get 0
@Sys.init$ret.3
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(Sys.init$ret.3)
// label END
(Sys.init$END)
// 	goto END
@Sys.init$END
0;JMP
// function Class1.set 0
(Class1.set)
@LCL
A=M
@0
D=A
@SP
M=M+D
// 	push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
// 	pop static 0
@SP
AM=M-1
D=M
@Class1.0
M=D
// 	push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
AM=M+1
A=A-1
M=D
// 	pop static 1
@SP
AM=M-1
D=M
@Class1.1
M=D
// 	push constant 0
@0
D=A
@SP
AM=M+1
A=A-1
M=D
// 	return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Class1.get 0
(Class1.get)
@LCL
A=M
@0
D=A
@SP
M=M+D
// 	push static 0
@Class1.0
D=M
@SP
AM=M+1
A=A-1
M=D
// 	push static 1
@Class1.1
D=M
@SP
AM=M+1
A=A-1
M=D
// 	sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// 	return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Class2.set 0
(Class2.set)
@LCL
A=M
@0
D=A
@SP
M=M+D
// 	push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
// 	pop static 0
@SP
AM=M-1
D=M
@Class2.0
M=D
// 	push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
AM=M+1
A=A-1
M=D
// 	pop static 1
@SP
AM=M-1
D=M
@Class2.1
M=D
// 	push constant 0
@0
D=A
@SP
AM=M+1
A=A-1
M=D
// 	return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Class2.get 0
(Class2.get)
@LCL
A=M
@0
D=A
@SP
M=M+D
// 	push static 0
@Class2.0
D=M
@SP
AM=M+1
A=A-1
M=D
// 	push static 1
@Class2.1
D=M
@SP
AM=M+1
A=A-1
M=D
// 	sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// 	return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// execution complete, loop forever
(VM_TRANSLATOR_END)
@VM_TRANSLATOR_END
0;JMP
