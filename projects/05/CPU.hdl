// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    /* Set M as dest */
    And(a=instruction[15], b=instruction[3], out=writeM);
    /* Push instruction or calculation into A register */
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);
    
    /* A register + load bit */
    Not(in=instruction[15], out=notInstrBit);
    Or(a=notInstrBit, b=instruction[5], out=aLoad);
    ARegister(in=aIn, load=aLoad, out=aOut, out[0..14]=addressM);
    /* D register + load bit */
    And(a=instruction[15], b=instruction[4], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=dOut);

    /* ALU, mux y input between A & M */
    Mux16(a=aOut, b=inM, sel=instruction[12], out=y);
    ALU(
        x=dOut,
        y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=aluZr,
        ng=aluNg
    );

    /* Counter */
    PC(in=aOut, reset=reset, load=jump, inc=notJumpReset, out[0..14]=pc);
    Or(a=jump, b=reset, out=jumpReset);
    Not(in=jumpReset, out=notJumpReset);
    /* DMux the jump instruction & calculate condition from ALU signals */
    DMux8Way(
        in=instruction[15], sel=instruction[0..2],
        b=gtJumpIn,
        c=eqJumpIn,
        d=geJumpIn,
        e=ltJumpIn,
        f=neJumpIn,
        g=leJumpIn,
        h=jmpJump
    ); 
    /* some helpers */
    Not(in=aluZr, out=notAluZr);
    Not(in=aluNg, out=notAluNg);
    And(a=notAluNg, b=notAluZr, out=aluPos);
    Not(in=aluPos, out=notAluPos);
    /* > 0 */
    And(a=gtJumpIn, b=aluPos, out=gtJump);
    /* == 0 */
    And(a=eqJumpIn, b=aluZr, out=eqJump);
    /* >= 0 */
    And (a=geJumpIn, b=notAluNg, out=geJump);
    /* < 0 */
    And(a=ltJumpIn, b=aluNg, out=ltJump);
    /* != 0 */
    And(a=neJumpIn, b=notAluZr, out=neJump);
    /* <= 0 */
    And(a=leJumpIn, b=notAluPos, out=leJump);
    /* Combine them to determine if we should jump */ 
    Or8Way(out=jump, 
        in[0]=gtJump, in[1]=eqJump, in[2]=geJump, in[3]=ltJump, 
        in[4]=neJump, in[5]=leJump, in[6]=jmpJump);

}
