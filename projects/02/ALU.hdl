// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // zero x & y
    Mux16(a=x, b=false, sel=zx, out=zeroedX);
    Mux16(a=y, b=false, sel=zy, out=zeroedY);


    // bitwise negate x & y
    // First negate the sign bit
    Not16(in=zeroedX, out=flippedX);
    Not16(in=zeroedY, out=flippedY);
    // Then mux between flipped bit & original
    Mux16(a=zeroedX, b=flippedX, sel=nx, out=negatedX);
    Mux16(a=zeroedY, b=flippedY, sel=ny, out=negatedY);

    // perform function
    And16(a=negatedX, b=negatedY, out=andedXY);
    Add16(a=negatedX, b=negatedY, out=addedXY);
    Mux16(a=andedXY, b=addedXY, sel=f, out=result);

    // not the result, set ng to sign bit, extract halfs of result
    Not16(in=result, out=notResult);
    Mux16(a=result, b=notResult, sel=no, out=out, out[15]=ng, out[0..7]=firstHalf, out[8..15]=secondHalf);

    // calcualte zr by ORing both halves, ORing that, & negating
    Or8Way(in=firstHalf, out=firstHalfOr);
    Or8Way(in=secondHalf, out=secondHalfOr);
    Or(a=firstHalfOr, b=secondHalfOr, out=anyOneBit);
    Not(in=anyOneBit, out=zr);
}
