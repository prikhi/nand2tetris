// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM;
    static int heapBase;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let heapBase = 2048;
        let freeList = heapBase;
        let RAM[freeList] = (16383 - 2048)+1;
        let RAM[freeList + 1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, pointerSize, pointer, foundPointer, prevPointer, nextPointer; 
        let pointer = freeList;
        let prevPointer = pointer;
        // recurse down list until we find large enough block
        while ((RAM[pointer] < (size + 1)) | ~(RAM[pointer+1] = 0)) {
            let prevPointer = pointer;
            let pointer = RAM[pointer+1];
        }
        if (RAM[pointer] < (size + 1)) {
            // return negative address on allocation error
            return -1;
        } else {
            let foundPointer = pointer;
            // note the block & next list
            let nextPointer = RAM[foundPointer + 1];
            let pointerSize = RAM[foundPointer];
            let block = foundPointer + 1;

            // adjust the pointer to after the block, set the new size & re-link.
            let pointer = block + size;
            let RAM[pointer] = pointerSize - (size + 1);
            let RAM[prevPointer + 1] = pointer;
            let RAM[pointer+1] = nextPointer;
            if ((prevPointer = freeList) & (foundPointer = freeList)) {
                let freeList = pointer;
            }

            // set size of block & return
            let RAM[foundPointer] = size + 1;
            return block;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int endOfList;
        let endOfList = freeList;
        // follow free list until end
        while (~(RAM[endOfList + 1] = 0)) {
            let endOfList = RAM[endOfList + 1];
        }
        // set next element of list to dealloc'd & mark it as end of list
        let RAM[endOfList + 1] = o - 1;
        let RAM[o] = 0;
        return;
    }    
}
