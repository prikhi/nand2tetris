// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int len, maxLen;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = 0;
        let maxLen = maxLength;
        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = maxLen) {
            return this;
        }
        let chars[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let chars[len] = 0;
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, pointer;
        var boolean shouldFlip;
        let val = 0;
        let pointer = 0;
        let shouldFlip = false;
        while (pointer < len) {
            if (chars[pointer] = 45) {
                let shouldFlip = true;
            } else {
                let val = (val * 10) + (chars[pointer] - 48);
            }
            let pointer = pointer + 1;
        }
        if (shouldFlip) {
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        while (len > 0) {
            do eraseLastChar();
        }

        if (val < 0) {
            do appendChar(45);
        }
        do setIntRecurse(Math.abs(val));

        return;
    }

    method void setIntRecurse(int val) {
        var int lastDigit;

        if (val > 9) {
            let lastDigit = String.modTen(val);
            do setIntRecurse(val / 10);
            do appendChar(lastDigit + 48);
        }  else {
            do appendChar(val + 48);
        }
        return;
    }

    function int modTen(int val) {
        var int working;
        let working = val / 10;
        return val - (working * 10);
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
