// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i, v;
        let powersOfTwo = Array.new(16);
        let i = 0;
        let v = 1;
        while (i < 16) {
            let powersOfTwo[i] = v;
            let i = i + 1;
            let v = v + v;
        }
        return;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, shiftedX, result;
        let i = 0;
        let result = 0;
        let shiftedX = x;
        while (i < 16) {
            if (Math.testBit(y, i))  {
                let result = result + shiftedX;
            }
            let i = i + 1;
            let shiftedX = shiftedX + shiftedX;
        }
        return result;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, twoY, q, q_, z;
        let absX = Math.abs(x);
        let absY = Math.abs(y);

        if (absY > absX) { return 0; }

        let twoY = absY + absY;
        if (twoY < 0) { return 0; }

        let q = Math.divide(absX, twoY);
        let q_ = q + q;
        if ((absX - (q_ * absY)) < absY) {
            let z = q_;
        } else {
            let z = q_ + 1;
        }

        if (~((x < 0) & (y < 0))) { 
            if (x < 0) {
                let z = -z; 
            }
            if (y < 0) {
                let z = -z; 
            }
        }
        return z;
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, j, w;
        let y = 0;
        let j = 7;
        while (j > -1) {
            let w = y + powersOfTwo[j];
            if (~(((w * w) > x))&((w * w) > 0)) {
                let y = w;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) { return a; } else { return b; }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        var int c;
        if (a < b) { let c = a; } else { let c = b; }
        return c;
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) { return -x; } else { return x; }
    }

    /** Returns whether i-th bit of x is set.
    */
    function boolean testBit(int x, int i) {
        var int bit;
        let bit = powersOfTwo[i];
        return ((bit&x) = bit);
    }
}
