function Math.init 2
push constant 16
call Array.new 1
pop static 1
push constant 0
pop local 0
push constant 1
pop local 1
label 0
push local 0
push constant 16
lt
not
if-goto 1
push static 1
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto 0
label 1
push constant 0
return
function Math.multiply 3
push constant 0
pop local 0
push constant 0
pop local 2
push argument 0
pop local 1
label 0
push local 0
push constant 16
lt
not
if-goto 1
push argument 1
push local 0
call Math.testBit 2
not
if-goto 2
push local 2
push local 1
add
pop local 2
goto 3
label 2
label 3
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto 0
label 1
push local 2
return
function Math.divide 6
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push local 1
push local 0
gt
not
if-goto 0
push constant 0
return
goto 1
label 0
label 1
push local 1
push local 1
add
pop local 2
push local 2
push constant 0
lt
not
if-goto 2
push constant 0
return
goto 3
label 2
label 3
push local 0
push local 2
call Math.divide 2
pop local 3
push local 3
push local 3
add
pop local 4
push local 0
push local 4
push local 1
call Math.multiply 2
sub
push local 1
lt
not
if-goto 4
push local 4
pop local 5
goto 5
label 4
push local 4
push constant 1
add
pop local 5
label 5
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
not
not
if-goto 6
push argument 0
push constant 0
lt
not
if-goto 8
push local 5
neg
pop local 5
goto 9
label 8
label 9
push argument 1
push constant 0
lt
not
if-goto 10
push local 5
neg
pop local 5
goto 11
label 10
label 11
goto 7
label 6
label 7
push local 5
return
function Math.sqrt 3
push constant 0
pop local 0
push constant 7
pop local 1
label 0
push local 1
push constant 1
neg
gt
not
if-goto 1
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
push argument 0
gt
not
push local 2
push local 2
call Math.multiply 2
push constant 0
gt
and
not
if-goto 2
push local 2
pop local 0
goto 3
label 2
label 3
push local 1
push constant 1
sub
pop local 1
goto 0
label 1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto 0
push argument 0
return
goto 1
label 0
push argument 1
return
label 1
function Math.min 1
push argument 0
push argument 1
lt
not
if-goto 0
push argument 0
pop local 0
goto 1
label 0
push argument 1
pop local 0
label 1
push local 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto 0
push argument 0
neg
return
goto 1
label 0
push argument 0
return
label 1
function Math.testBit 1
push static 1
push argument 1
add
pop pointer 1
push that 0
pop local 0
push local 0
push argument 0
and
push local 0
eq
return
