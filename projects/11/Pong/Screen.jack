// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int SCREEN;
    static boolean color;
    static Array bitSelectors;

    /** Initializes the Screen. */
    function void init() {
        var int i, bitSel;
        let SCREEN = 16384;
        let color = true;
        let bitSelectors = Array.new(16);
        let i = 0;
        let bitSel = 1;
        while (i < 16) {
            let bitSelectors[i] = bitSel;
            let bitSel = bitSel + bitSel;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int word;
        let word = 0;
        while (word < 8192) {
            do Memory.poke(SCREEN + word, 0);
            let word = word + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pixelNumber, columnBit, pixelVal;
        let pixelNumber = (x / 16) + (y * 32);
        let columnBit = Screen.modSixteen(x);
        let pixelVal = Memory.peek(SCREEN + pixelNumber);
        if (color) {
            // set column bit to 1
            let columnBit = (bitSelectors[columnBit]);
            let pixelVal = pixelVal | columnBit;
        } else {
            // set column bit to 0
            let columnBit = ~(bitSelectors[columnBit]);
            let pixelVal = pixelVal & columnBit;
        }
        do Memory.poke(SCREEN + pixelNumber, pixelVal);

        return;
    }

    function int modSixteen(int x) {
        return (x - ((x / 16) * 16));
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int xa, int ya, int xb, int yb) {
        var int dx, dy, i, a, b, j, k, diff;
        var boolean xIncrease, yIncrease;
        let dx = xb - xa; 
        let dy = yb - ya;
        let i = 0;

        let xIncrease = (dx > 0);
        let yIncrease = (dy > 0);

        if (dy = 0) {
            // horizontal line
            if (xIncrease) { let j = 1; } else { let j = -1; }
            while (~(i = dx)) {
                do Screen.drawPixel(xa + i, yb);
                let i = i + j;
            }
        } else {
            if (dx = 0) {
                // vertical line
                if (yIncrease) { let j = 1; } else { let j = -1; }
                while (~(i = dy)) {
                    do Screen.drawPixel(xb, ya + i);
                    let i = i + j;
                }
            } else {
                // diagonal
                let diff = 0;
                let a = 0;
                let b = 0;
                if (xIncrease) { let j = 1; } else { let j = -1; }
                if (yIncrease) { let k = 1; } else { let k = -1; }

                while ((~(dx = a)) & (~(dy = b))) {
                    do Screen.drawPixel(xa + a, ya + b);
                    if (diff < 0) {
                        let a = a + j;
                        let diff = diff + (Math.abs(dy));
                    } else {
                        let b = b + k;
                        let diff = diff - (Math.abs(dx));
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // TODO: this is the naive method.
        // The more optimized method is drawing the left & right vertical
        // slices until we hit word boundaries. Then we can fill in the rest by
        // writing whole words instead of drawing the whole rectangle pixel by
        // pixel
        var int dy, i;
        let dy = y2 - y1 + 1;
        let i = 0;
        while (i < dy) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, xRad;
        let dy = -r;
        while (dy < (r + 1)) {
            let xRad = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - xRad, y + dy, x + xRad, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
